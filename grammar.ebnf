(* it is assumed that any non-breaking whitespace and comments have been removed from the input *)
start = statements;

statements = [ statement, { breaking_whitespace, statement } ];
statement =
    assignment
    | function_definition
    | structure
    | condition
    | loop
    | expression;

variable_name = identifier, [ ":", identifier ];
assignment = variable_name, "=", expression;

parameter = identifier, ":", identifier;
parameters = [ parameter, { ",", parameter } ];
type_parameters = "<", { identifier }, ">";
function_definition =
    "function", identifier, type_parameters, "(", parameters, ")", "{", statements, "}";

structure = "structure", identifier, type_parameters, "{", parameters, "}";

condition = "if", "(", boolean_expression, ")", "{", statements, "}";
loop = "loop", "(", boolean_expression, ")", "{", statements, "}";

expressions = [ expression, { ",",  expression } ];
expression =
    ambiguously_typed_expression
    | numeric_expression
    | boolean_expression
    | string_literal
    | chain;
(* ambiguously typed expressions are expressions for which the type cannot be inferred during parsing *)
ambiguously_typed_expression =
    identifier
    | invocation;
numeric_expression =
    numeric_expression, ( "+", "-", "*", "/", "%" ), numeric_expression
    | ( "+", "-"), numeric_expression
    | "(", numeric_expression, ")"
    | numeric_literal
    | ambiguously_typed_expression;
boolean_expression =
    boolean_expression, ( "||", "&&", "!" ), boolean_expression
    | "(", boolean_expression, ")"
    | boolean_literal
    | expression;
(* multiple constructs (e.g. functions or structs) can be invocated/initialized with the same syntax *)
invocation = identifier, "(", expressions, ")";
method_invocation = ".", invocation;
property_access = ".", identifier;
chain = expression, { ".", ( method_invocation, property_access ) };

(* tokens, not handeled by parser *)
numeric_literal = { digit }, [ ".", { digit } ];
boolean_literal = "true" | "false";
string_literal = "\"", ( letter | digit ), "\"";
identifier = letter, { letter | digit };
breaking_whitespace = "\n", { "\n" };

(* utility rules *)
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
letter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
    | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u"
    | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F"
    | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q"
    | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";
