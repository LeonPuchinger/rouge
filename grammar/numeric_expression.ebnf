(* IMPORT expression.ebnf *)
(* IMPORT token.ebnf *)
(* IMPORT util.ebnf *)

literal = numeric_literal;
unary = ( "+" | "-" ), numeric_expression;
parenthesized = "(", numeric_expression, ")";
ambiguously_typed_expression = invocation | symbol;
simple_expression =
    unary
    | parenthesized
    | literal;
factor =
    simple_expression
    | ambiguously_typed_expression;
product = factor { ( "*" | "/" ), factor };
sum = product, ( "+" | "-" ), product, { ( "+" | "-" ), product };

(* top-level `product` has to be binary. otherwise it could let through `ambiguously_typed_expression` *)
(* EXPORT *)
numeric_expression = sum
    | product, ( "*" | "/" ), factor
    | simple_expression;
